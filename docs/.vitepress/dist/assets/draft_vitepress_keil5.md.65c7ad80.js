import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.027d2da0.js";const h=JSON.parse('{"title":"::","description":"","frontmatter":{},"headers":[],"relativePath":"draft/vitepress/keil5.md","filePath":"draft/vitepress/keil5.md"}'),p={name:"draft/vitepress/keil5.md"},o=l(`<h1 id="" tabindex="-1"><code>::</code> <a class="header-anchor" href="#" aria-label="Permalink to &quot;\`::\`&quot;">​</a></h1><p><code>::</code>，<a href="https://en.wikipedia.org/wiki/Scope_resolution_operator" target="_blank" rel="noreferrer">Scope Resolution Operator</a>，作用域解析运算符，其作用是 <span style="color:red;">解析作用域</span>，<code>A::B</code> 表示作用域 A 中的名称 B，A 可以是<code>namespace</code>、<code>class</code>、<code>struct</code>；</p><h2 id="在全局命名空间中查找" tabindex="-1">在全局命名空间中查找 <a class="header-anchor" href="#在全局命名空间中查找" aria-label="Permalink to &quot;在全局命名空间中查找&quot;">​</a></h2><p>在类型名称前面加上 <code>::</code>，它会告诉编译器在全局命名空间中查找该类型</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ::count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">  // set global count to 1</span></span>
<span class="line"><span style="color:#E1E4E8;">  count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">    // set local count to 2</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  ::count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">  // set global count to 1</span></span>
<span class="line"><span style="color:#24292E;">  count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">    // set local count to 2</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1</span></span>
<span class="line"><span style="color:#e1e4e8;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1</span></span>
<span class="line"><span style="color:#24292e;">2</span></span></code></pre></div><h2 id="啊" tabindex="-1">啊 <a class="header-anchor" href="#啊" aria-label="Permalink to &quot;啊&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;">::i;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">::i;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="啊1" tabindex="-1">啊1 <a class="header-anchor" href="#啊1" aria-label="Permalink to &quot;啊1&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Configuration</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // class 1, in global namespace</span></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyApp</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Configuration</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // class 2, different from class 1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">blah</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#6A737D;">        // resolves to MyApp::Configuration, class 2</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">Configuration</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">doStuff</span><span style="color:#E1E4E8;">(...) </span></span>
<span class="line"><span style="color:#6A737D;">        // resolves to top-level Configuration, class 1</span></span>
<span class="line"><span style="color:#E1E4E8;">        ::</span><span style="color:#B392F0;">Configuration</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">doStuff</span><span style="color:#E1E4E8;">(...)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Configuration</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // class 1, in global namespace</span></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyApp</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Configuration</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // class 2, different from class 1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">blah</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#6A737D;">        // resolves to MyApp::Configuration, class 2</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Configuration</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">doStuff</span><span style="color:#24292E;">(...) </span></span>
<span class="line"><span style="color:#6A737D;">        // resolves to top-level Configuration, class 1</span></span>
<span class="line"><span style="color:#24292E;">        ::</span><span style="color:#6F42C1;">Configuration</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">doStuff</span><span style="color:#24292E;">(...)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="以文件目录来类比" tabindex="-1">以文件目录来类比 <a class="header-anchor" href="#以文件目录来类比" aria-label="Permalink to &quot;以文件目录来类比&quot;">​</a></h2><p>参考自</p><ul><li><a href="https://stackoverflow.com/a/4269232/20834092" target="_blank" rel="noreferrer">c++ - What is the meaning of prepended double colon &quot;::&quot;? - Tony Delroy&#39;s answer - Stack Overflow</a></li></ul><p>可以把 <code>::</code> 类比为文件系统目录中的 <code>/</code></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::cout</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">::</span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::cout</span></span></code></pre></div><p>如果位于名为 <code>X</code> 的 <code>namespace</code> 中，并且声明了 <code>using namespace Y</code>，那么：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::cout</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::cout</span></span></code></pre></div><p>会在：</p><ul><li><code>::X::std::out</code></li><li><code>::std::out</code></li><li><code>::Y::std::cout</code></li></ul><p>内寻找，但由于 <a href="https://en.cppreference.com/w/cpp/language/adl" target="_blank" rel="noreferrer">argument-dependent lookup</a>，只有 <code>::std::out</code> 才是明确的对象。</p><h2 id="和-的区别" tabindex="-1"><code>::</code> 和 <code>.</code> 的区别 <a class="header-anchor" href="#和-的区别" aria-label="Permalink to &quot;\`::\` 和 \`.\` 的区别&quot;">​</a></h2><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://stackoverflow.com/questions/4269034/what-is-the-meaning-of-prepended-double-colon" target="_blank" rel="noreferrer">c++ - What is the meaning of prepended double colon &quot;::&quot;? - Stack Overflow</a></li><li><a href="https://en.wikipedia.org/wiki/Scope_resolution_operator" target="_blank" rel="noreferrer">Scope resolution operator - Wikipedia</a></li><li><a href="https://blog.csdn.net/qq1623803207/article/details/89398435" target="_blank" rel="noreferrer">C++中的 ::_c++ 的::_有梦想的伟仔的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/s15868887695/article/details/56834685" target="_blank" rel="noreferrer">C++中的.和::和：和-&gt;的区别_define_SGZ的博客-CSDN博客</a></li></ul>`,24),e=[o];function c(t,r,i,y,E,d){return a(),n("div",null,e)}const g=s(p,[["render",c]]);export{h as __pageData,g as default};
