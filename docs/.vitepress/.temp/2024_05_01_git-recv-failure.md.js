import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"Git Recv failure Connection was reset","description":"","frontmatter":{"title":"Git Recv failure Connection was reset","date":"2024/05/01","tags":["debug","git","翻墙"]},"headers":[],"relativePath":"2024/05/01/git-recv-failure.md","filePath":"2024/05/01/git-recv-failure.md","lastUpdated":1728728432000}');
const _sfc_main = { name: "2024/05/01/git-recv-failure.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="git-recv-failure-connection-was-reset" tabindex="-1">Git Recv failure: Connection was reset <a class="header-anchor" href="#git-recv-failure-connection-was-reset" aria-label="Permalink to &quot;Git Recv failure: Connection was reset&quot;">​</a></h1><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h2><p>今天在撰写 VitePress 草稿的时候，想 <a href="https://git-scm.com/docs/git-pull" target="_blank" rel="noreferrer">pull</a> 一下 GitHub 的远程私有库。</p><p>连着运行了三次 <code>git pull origin main</code>，每次都是不同的错误</p><p>第1次：<code>Recv failure: Connection was reset</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ git pull origin main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fatal: unable to access &#39;https://github.com/tangjan/vitepress-draft.git/&#39;: Recv failure: Connection was reset</span></span></code></pre></div><p>第2次：<code>HTTP/2 stream 1 was not closed cleanly before end of the underlying stream</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ git pull origin main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fatal: unable to access &#39;https://github.com/tangjan/vitepress-draft.git/&#39;: HTTP/2 stream 1 was not closed cleanly before end of the underlying stream</span></span></code></pre></div><p>第3次：<code>Failed to connect to github.com port 443 after 21047 ms: Couldn&#39;t connect to server</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ git pull origin main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fatal: unable to access &#39;https://github.com/tangjan/vitepress-draft.git/&#39;: Failed to connect to github.com port 443 after 21047 ms: Couldn&#39;t connect to server</span></span></code></pre></div><h2 id="解决" tabindex="-1">解决 <a class="header-anchor" href="#解决" aria-label="Permalink to &quot;解决&quot;">​</a></h2><p>参考</p><ul><li><a href="https://github.com/orgs/community/discussions/49456#discussioncomment-5550697" target="_blank" rel="noreferrer">How to resolve &quot;Recv failure: Connection was reset&quot; · community · Discussion #49456</a></li></ul><p>执行以下两条指令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">git</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> config</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --global</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --unset</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> http.proxy</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">git</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> config</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --global</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --unset</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> https.proxy</span></span></code></pre></div><p>然后再执行 <code>git pull origin main</code>，就能成功 pull 了。</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("2024/05/01/git-recv-failure.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const gitRecvFailure = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  gitRecvFailure as default
};
